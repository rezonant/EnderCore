buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'

}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'

ext.buildnumber = 0
if (System.getenv('BUILD_NUMBER') != null)
    project.buildnumber = System.getenv('BUILD_NUMBER')
else
    logger.lifecycle "No build number detected, setting to 0"

group = "com.enderio.core"
archivesBaseName = "EnderCore"
version = "${minecraft_version}-${mod_version}.${buildnumber}"

if (project.hasProperty('release_channel')) {
    version += "-${project.release_channel}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

repositories {
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

//    replace "@VERSION@", project.version
//    replaceIn "EnderCore.java"

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug' // https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels

            mods {
                endercore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                endercore {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    compile.extendsFrom exportedCompile
}

//sourceSets {
//    main {
//        java {
//            srcDir 'src/main/java'
//            exclude '**/enderio/trigger/**'
//        }
//        resources {
//            srcDir 'resources'
//        }
//    }
//}

processResources {
    inputs.property "version", project.version

//    from(sourceSets.main.resources.srcDirs) {
//        include '**/*.info'
//        include '**/*.properties'
//        expand 'version': project.version
//    }
//
//    from(sourceSets.main.resources.srcDirs) {
//        exclude '**/*.info'
//        exclude '**/*.properties'
//    }
}

task coreJar(type: Jar) {
    from(sourceSets.main.output) {
        include 'com/enderio/core/common/transform/**'
    }
    manifest {
        attributes 'FMLCorePlugin': "com.enderio.core.common.transform.EnderCorePlugin"
        attributes 'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}:core"
    }
    classifier 'core'
}

jar {
    from { configurations.exportedCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'com/enderio/core/common/transform/**'
    from(coreJar.archivePath.absolutePath) {
        include '*'
        into ("META-INF/libraries")
    }
    manifest {
        attributes([
                "Specification-Title"     : "EnderCore",
                "Specification-Vendor"    : "SleepyTrousers",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "SleepyTrousers",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "ContainedDeps"           : coreJar.archivePath.name
        ])
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from { configurations.exportedCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    classifier = 'deobf'
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
	include 'crazypants/enderio/api/**/*'
    classifier = 'api'
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

//build.dependsOn apiJar, deobfJar, javadoc